{"version":3,"sources":["D:/tools/es-vue/dist/types/web/ui/RichEditor.d.es"],"names":["getKeySymbols","_editor","instance","lastEditorData","unmonitor","creator","SAMPLE_READ_ONLY_LOCK_ID","INPUT_EVENT_DEBOUNCE_WAIT","editor","value","onInitialized","CKEDITOR_VERSION","window","major","String","split","map","val","Number","console","warn","watch","JSON","stringify","data","set","formatValue","enableReadOnlyMode","RichEditor","disableReadOnlyMode","getContent","options","get","setUpEditorEvents","emitDebouncedInputEvent","debounce","evt","disableTwoWayDataBinding","onChanged","leading","call","model","editing","view","emit","onUnmounted","destroy","getInitData","onMounted","editorConfig","Object","assign","config","initValue","create","getContainer","then","markRaw","readonly","toolbarContainer","getToolbarContainer","is","toolbar","ui","appendChild","element","on","event","status","stickyPanel","monitor","name","toolbarStickyPanelEnable","return","catch","error","getRefs","getEditorName","render","style","width","height","className","createRecord","reload","createComponent"],"mappings":"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","sourcesContent":["package web.ui;\r\n\r\nimport web.components.Component;\r\nimport ckeditor.core.Editor;\r\nimport {debounce} from 'lodash-es';\r\nimport {h, markRaw} from 'vue';\r\n\r\nimport \"../styles/rich-text-style.css\"\r\n\r\n@Runtime(client)\r\nclass RichEditor extends Component{\r\n\r\n    static SAMPLE_READ_ONLY_LOCK_ID = 'Integration Sample';\r\n    static INPUT_EVENT_DEBOUNCE_WAIT = 300;\r\n\r\n    tagName:string = 'div';\r\n    value:string = '';\r\n    modelValue = null;\r\n    disableTwoWayDataBinding:boolean=false;\r\n    readonly:boolean = false;\r\n    config:ckeditor.core.EditorConfig = {};\r\n    width:string = 'auto';\r\n    height:string = 'auto';\r\n    className:string = '';\r\n    toolbarStickyPanelEnable = true;\r\n\r\n    private _editor:class<Editor>=null;\r\n\r\n    get editor():class<Editor>{\r\n        return this._editor;\r\n    }\r\n\r\n    set editor(value:class<Editor>){\r\n        this._editor = value;\r\n    }\r\n\r\n    protected instance:Editor=null;\r\n    \r\n    private lastEditorData = null;\r\n\r\n    @Override\r\n    protected onInitialized():void{\r\n        const { CKEDITOR_VERSION } = window;\r\n\t\tif ( CKEDITOR_VERSION ) {\r\n\t\t\tconst [ major ] = String(CKEDITOR_VERSION).split( '.' ).map( val=>Number(val) );\r\n\t\t\tif ( major < 37 ) {\r\n\t\t\t\tconsole.warn( 'The <CKEditor> component requires using CKEditor 5 in version 37 or higher.' );\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconsole.warn( 'Cannot find the \"CKEDITOR_VERSION\" in the \"window\" scope.' );\r\n\t\t}\r\n\r\n        this.watch('value',(value)=>{\r\n\t\t\tif(this.instance && JSON.stringify(value) !== JSON.stringify(this.lastEditorData)  ) {\r\n                this.instance.data.set(this.formatValue(value))\r\n\t\t\t}\r\n\t    });\r\n\r\n        this.watch('readonly',(value)=>{\r\n\t\t\tif( value ){\r\n\t\t\t\tthis.instance.enableReadOnlyMode(RichEditor.SAMPLE_READ_ONLY_LOCK_ID);\r\n\t\t\t}else{\r\n\t\t\t\tthis.instance.disableReadOnlyMode(RichEditor.SAMPLE_READ_ONLY_LOCK_ID);\r\n\t\t\t}\r\n\t\t});\r\n    }\r\n\r\n    protected formatValue(value){\r\n        return value;\r\n    }\r\n\r\n    protected getContent(options?:{[key:string]:string}){\r\n        const editor = this.instance;\r\n        if( editor ){\r\n            return editor.data.get(options)\r\n        }\r\n        return false;\r\n    }\r\n\r\n    protected setUpEditorEvents() {\r\n        const editor = this.instance;\r\n        const emitDebouncedInputEvent = debounce( evt => {\r\n            if ( this.disableTwoWayDataBinding ) {\r\n                return;\r\n            }\r\n            const data = this.getContent();\r\n            this.lastEditorData = data\r\n            this.onChanged(data, evt, editor)\r\n            \r\n        }, RichEditor.INPUT_EVENT_DEBOUNCE_WAIT, { leading: true } );\r\n\r\n        \r\n        editor.model.document.on( 'change:data', emitDebouncedInputEvent );\r\n        editor.editing.view.document.on( 'focus', evt => {\r\n            this.emit( 'focus', evt, editor );\r\n        });\r\n\r\n        editor.editing.view.document.on( 'blur', evt => {\r\n            this.emit( 'blur', evt, editor );\r\n        });\r\n\t}\r\n\r\n    protected onChanged(data, evt, editor){\r\n        this.emit( 'update:modelValue', data, evt, editor );\r\n        this.emit( 'input', data, evt, editor );\r\n    }\r\n\r\n    @Override\r\n    protected onUnmounted():void{\r\n        if ( this.instance ) {\r\n\t\t\tthis.instance.destroy();\r\n\t\t\tthis.instance = null;\r\n\t\t}\r\n        let unmonitor = this.unmonitor;\r\n        if(unmonitor)unmonitor();\r\n\t\tthis.emit( 'destroy', this.instance);\r\n    }\r\n\r\n    protected getInitData(){\r\n        return this.value;\r\n    }\r\n\r\n    @Override\r\n    protected onMounted():void{\r\n        const editorConfig = Object.assign({}, this.config);\r\n        const initValue = this.formatValue(this.getInitData());\r\n\t\tif ( initValue ) {\r\n\t\t\teditorConfig.initialData = initValue;\r\n\t\t}\r\n\r\n\t\tthis.editor\r\n        .create(this.getContainer(), editorConfig)\r\n        .then( editor => {\r\n\r\n            this.instance = markRaw( editor );\r\n            this.setUpEditorEvents();\r\n            \r\n            if ( JSON.stringify(initValue) !== JSON.stringify(editorConfig.initialData) ) {\r\n                this.instance.data.set( initValue )\r\n            }\r\n            if ( this.readonly ) {\r\n                editor.enableReadOnlyMode( RichEditor.SAMPLE_READ_ONLY_LOCK_ID);\r\n            }\r\n            \r\n            const toolbarContainer = this.getToolbarContainer();\r\n            if(toolbarContainer is HTMLElement){\r\n                const toolbar = editor.ui.view.toolbar as {element:HTMLElement};\r\n                if(toolbar){\r\n                    toolbarContainer.appendChild( toolbar.element );\r\n                }\r\n            }\r\n\r\n            editor.on('fullscreen', (event, status)=>{\r\n                this.emit('fullscreen', event, editor, status);\r\n            });\r\n\r\n            this.emit('ready', editor );\r\n            const stickyPanel = editor.ui.view.stickyPanel as Record;\r\n            if(stickyPanel){\r\n                let monitor = (event:Record, name, value)=>{\r\n                    if(!this.toolbarStickyPanelEnable){\r\n                        event.stop()\r\n                        event.return = false;\r\n                    }\r\n                }\r\n                stickyPanel.on('set:isActive', monitor)\r\n                this.unmonitor = ()=>{\r\n                    stickyPanel.off('set:isActive', monitor)\r\n                }\r\n            }\r\n        })\r\n        .catch( error => {\r\n            console.error( error );\r\n        });\r\n        \r\n    }\r\n\r\n    private unmonitor = null;\r\n\r\n    protected getToolbarContainer(){\r\n        return this.getRefs('toolbar-container')\r\n    }\r\n\r\n    protected getContainer(){\r\n        return this.getRefs('container')\r\n    }\r\n\r\n    protected getEditorName(){\r\n        return 'classic'\r\n    }\r\n\r\n    @Override\r\n    protected render(){\r\n        let style={\r\n            width,\r\n            height\r\n        }\r\n        return <div class={\"rich-text-editor \"+this.className}\r\n                    data-type={this.getEditorName()}\r\n                    data-width={this.width} data-height={this.height} style={style}>\r\n                <div ref=\"container\"></div>\r\n        </div>\r\n    }\r\n}"]}