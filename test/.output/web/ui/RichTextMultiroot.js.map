{"version":3,"sources":["D:/tools/es-vue/dist/types/web/ui/RichTextMultiroot.d.es"],"names":["getKeySymbols","added","creator","main","Multiroot","builtinPlugins","Essentials","UploadAdapter","Autoformat","Bold","Italic","BlockQuote","Heading","Image","ImageInsert","ImageInsertViaUrl","SimpleUploadAdapter","ImageCaption","ImageStyle","ImageToolbar","ImageUpload","Indent","Link","List","MediaEmbed","Paragraph","PasteFromOffice","PictureEditing","Table","TableToolbar","TextTransformation","Subscript","Strikethrough","Code","Underline","Alignment","FontBackgroundColor","FontColor","FontFamily","FontSize","FullScreen","defaultConfig","toolbar","items","image","styles","resizeOptions","name","label","value","insert","integrations","table","contentToolbar","language","onInitialized","on","type","editor","toolbarContainer","getToolbarContainer","focusTracker","ui","is","call","get","classList","add","remove","evt","root","editableElement","createEditable","node","parentNode","replaceChild","appendChild","updateLayout","getEditorName","getContent","options","instance","getFullData","getInitData","layout","getContainer","dataset","data","Object","keys","forEach","key","child","innerHTML","getRefs","obj","queryElementNode","children","getChildren","index","Array","from","childNodes","filter","nodeType","document","querySelector","layoutNames","model","detachRoot","old","removeChild","addRoot","render","width","height","createRecord","reload","createComponent"],"mappings":"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","sourcesContent":["package web.ui{\r\n\r\n    import web.components.Component;\r\n\r\n    import ckeditor.core.Editor;\r\n\r\n    import ckeditor.editor.Multiroot;\r\n    import ckeditor.plugins.Paragraph\r\n    import ckeditor.plugins.Essentials\r\n    import ckeditor.plugins.Bold\r\n    import ckeditor.plugins.Underline\r\n    import ckeditor.plugins.Code\r\n    import ckeditor.plugins.Strikethrough\r\n    import ckeditor.plugins.Subscript\r\n    import ckeditor.plugins.BlockQuote\r\n    import ckeditor.plugins.Heading\r\n    import ckeditor.plugins.Alignment\r\n\r\n    import ckeditor.plugins.UploadAdapter\r\n    import ckeditor.plugins.Autoformat\r\n    import ckeditor.plugins.Image\r\n    import ckeditor.plugins.SimpleUploadAdapter\r\n    import ckeditor.plugins.ImageInsert\r\n    import ckeditor.plugins.ImageInsertViaUrl\r\n    import ckeditor.plugins.ImageCaption\r\n    import ckeditor.plugins.ImageStyle\r\n    import ckeditor.plugins.ImageToolbar\r\n    import ckeditor.plugins.ImageUpload\r\n    import ckeditor.plugins.Indent\r\n    import ckeditor.plugins.Link\r\n    import ckeditor.plugins.List\r\n    import ckeditor.plugins.MediaEmbed\r\n    import ckeditor.plugins.PasteFromOffice\r\n    import ckeditor.plugins.PictureEditing\r\n    import ckeditor.plugins.Table\r\n    import ckeditor.plugins.TableToolbar\r\n    import ckeditor.plugins.TextTransformation\r\n    import ckeditor.plugins.Italic\r\n\r\n    import ckeditor.plugins.FontBackgroundColor\r\n    import ckeditor.plugins.FontColor\r\n    import ckeditor.plugins.FontFamily\r\n    import ckeditor.plugins.FontSize\r\n\r\n    import ckeditor.plugins.FullScreen\r\n\r\n    class RichTextMultiroot extends RichEditor{\r\n\r\n        layout:{\r\n            [key:string]:RichTextMultirootLayoutValueType\r\n        }={};\r\n\r\n        toolbar:Node=null;\r\n\r\n        value:{\r\n            [key:string]:string\r\n        } = {};\r\n\r\n        @Override\r\n        protected onInitialized():void{\r\n            super.onInitialized();\r\n            this.on('ready', (type, editor:Multiroot)=>{\r\n\r\n                const toolbarContainer = this.getToolbarContainer();\r\n                const focusTracker = editor.ui.focusTracker;\r\n                if(focusTracker && toolbarContainer is HTMLElement){\r\n                    focusTracker.on( 'change:isFocused', () => {\r\n                        if ( focusTracker.isFocused ) {\r\n                            toolbarContainer.classList.add( 'sticky' );\r\n                        } else {\r\n                            toolbarContainer.classList.remove( 'sticky' );\r\n                        }\r\n                    });\r\n                }\r\n\r\n                editor.on( 'addRoot', ( evt, root ) => {\r\n                    const editableElement = editor.createEditable(root);\r\n                    const node = this.added[root.rootName];\r\n                    if(node.parentNode){\r\n                        node.parentNode.replaceChild(editableElement, node);\r\n                    }else{\r\n                        node.appendChild(editableElement);\r\n                    }\r\n                });\r\n\r\n                this.updateLayout();\r\n            });\r\n        }\r\n\r\n        private added:{\r\n            [key:string]:HTMLElement\r\n        }={};\r\n\r\n        @Override\r\n        protected get editor(){\r\n            return Multiroot;\r\n        }\r\n\r\n        @Override\r\n        protected getEditorName(){\r\n            return 'multiroot'\r\n        }\r\n\r\n        @Override\r\n        protected getContent(options){\r\n            return (this.instance as Multiroot).getFullData(options);\r\n        }\r\n\r\n        @Override\r\n        getInitData(){\r\n            const layout = this.getContainer();\r\n            const dataset = {};\r\n            const data = this.value || {};\r\n            Object.keys(layout).forEach(key=>{\r\n                if( !dataset[key] ){\r\n                    const child = layout[key] as HTMLElement;\r\n                    dataset[key] = data[key] || child.innerHTML;\r\n                }\r\n            });\r\n            return dataset;\r\n        }\r\n\r\n        @Override\r\n        protected getToolbarContainer(){\r\n            const toolbar = this.toolbar;\r\n            if(toolbar)return toolbar;\r\n            return this.getRefs('rich-text-toolbar')\r\n        }\r\n\r\n        @Override\r\n        protected getContainer(){\r\n            const obj = {...this.layout};\r\n            Object.keys(obj).forEach( key=>{\r\n                if( !this.added[key] ){\r\n                    let value = this.queryElementNode(obj[key]);\r\n                    if( value ){\r\n                        obj[key] = value;\r\n                    }\r\n                }\r\n            });\r\n            const children = this.getChildren();\r\n            children.forEach( (child,index)=>{\r\n                const key = 'root-child-'+index;\r\n                obj[key] = child;\r\n            });\r\n            return obj;\r\n        }\r\n\r\n        protected getChildren(){\r\n            const child = this.getRefs('children');\r\n            if(child is HTMLElement){\r\n                return Array.from(child.childNodes).filter(child=>child.nodeType===1);\r\n            }\r\n            return [];\r\n        }\r\n\r\n        protected queryElementNode(value:any):HTMLElement{\r\n            const type = typeof value;\r\n            if( type ==='string' ){\r\n                value = document.querySelector(value as string)\r\n            }else if( type ==='function' ){\r\n                value = value.call(this);\r\n            }\r\n            return value instanceof HTMLElement ? value : null;\r\n        }\r\n\r\n        protected updateLayout(){\r\n            const editor = this.instance as Multiroot;\r\n            if( editor ){\r\n                const layout = this.getContainer();\r\n                const layoutNames = Object.keys(layout);\r\n                Object.keys(this.added).forEach( key=>{\r\n                    if(!layout[key]){\r\n                        const root = editor.model.document.getRoot(key)\r\n                        if(root && root.isAttached()){\r\n                            editor.detachRoot(key);\r\n                            const old = this.added[key];\r\n                            if(old.parentNode){\r\n                                old.parentNode.removeChild(old);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                for (const name of layoutNames) {\r\n                    const node = layout[name] as HTMLElement;\r\n                    const old = this.added[name];\r\n                    if( old !== node ){\r\n                        const root = editor.model.document.getRoot(name);\r\n                        if( old ){\r\n                            if(root && root.isAttached()){\r\n                                editor.detachRoot(name);\r\n                                if(old.parentNode){\r\n                                    old.parentNode.removeChild(old);\r\n                                }\r\n                            }else{\r\n                                continue;\r\n                            }\r\n                        }\r\n                        if( node ){\r\n                            this.added[name] = node;\r\n                            if( !root ){\r\n                                editor.addRoot(name,{ data: this.value[name] || node.innerHTML});\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        @Override\r\n        protected render(){\r\n            return <div class=\"rich-text-multi-root rich-text-editor\" style={`width:${this.width};`}\r\n                data-type={this.getEditorName()}\r\n                data-width={this.width} data-height={this.height}>\r\n                <div d:if={!this.toolbar} class=\"rich-text-toolbar\" ref=\"rich-text-toolbar\"></div>\r\n                <div class=\"ck-editor__main\" ref=\"children\">\r\n                    <s:default>\r\n                        <div></div>\r\n                    </s:default>\r\n                </div>\r\n            </div>\r\n        }\r\n\r\n        @Main(false)\r\n        static main(){\r\n            Multiroot.builtinPlugins=[\r\n                Essentials,\r\n                UploadAdapter,\r\n                Autoformat,\r\n                Bold,\r\n                Italic,\r\n                BlockQuote,\r\n                Heading,\r\n                Image,\r\n                ImageInsert,\r\n                ImageInsertViaUrl,\r\n                SimpleUploadAdapter,\r\n                ImageCaption,\r\n                ImageStyle,\r\n                ImageToolbar,\r\n                ImageUpload,\r\n                Indent,\r\n                Link,\r\n                List,\r\n                MediaEmbed,\r\n                Paragraph,\r\n                PasteFromOffice,\r\n                PictureEditing,\r\n                Table,\r\n                TableToolbar,\r\n                TextTransformation,\r\n                Subscript,\r\n                Strikethrough,\r\n                Code,\r\n                Underline,\r\n                Alignment,\r\n                FontBackgroundColor,\r\n                FontColor,\r\n                FontFamily,\r\n                FontSize,\r\n                FullScreen\r\n            ];\r\n            Multiroot.defaultConfig = {\r\n                toolbar: {\r\n                    items: [\r\n                        'undo', 'redo',\r\n                        '|', 'heading','fontSize','fontFamily','fontColor','fontBackgroundColor',\r\n                        '|', 'bold', 'italic','Underline','outdent', 'indent','alignment',\r\n                        '|','bulletedList', 'numberedList','blockQuote',\r\n                        '|', 'link', 'insertImage', 'insertTable','mediaEmbed','|','FullScreen'\r\n                    ]\r\n                },\r\n                image: {\r\n                    styles: [\r\n                        'alignCenter',\r\n                        'alignLeft',\r\n                        'alignRight'\r\n                    ],\r\n                    resizeOptions: [\r\n                        {\r\n                            name: 'resizeImage:original',\r\n                            label: 'Original',\r\n                            value: null\r\n                        },\r\n                        {\r\n                            name: 'resizeImage:50',\r\n                            label: '50%',\r\n                            value: '50'\r\n                        },\r\n                        {\r\n                            name: 'resizeImage:75',\r\n                            label: '75%',\r\n                            value: '75'\r\n                        }\r\n                    ],\r\n                    toolbar: [\r\n                        'imageTextAlternative', 'toggleImageCaption', '|',\r\n                        'imageStyle:inline', 'imageStyle:wrapText', 'imageStyle:breakText', 'imageStyle:side', '|',\r\n                        'resizeImage'\r\n                    ],\r\n                    insert: {\r\n                        integrations: [\r\n                            'upload', 'assetManager', 'url'\r\n                        ]\r\n                    }\r\n                },\r\n                table: {\r\n                    contentToolbar: [\r\n                        'tableColumn',\r\n                        'tableRow',\r\n                        'mergeTableCells'\r\n                    ]\r\n                },\r\n                language: 'zh-cn'\r\n            };\r\n        }\r\n\r\n    }\r\n\r\n\r\n    type RichTextMultirootLayoutValueType = string | Node | (target:RichTextMultiroot)=>Node\r\n}"]}