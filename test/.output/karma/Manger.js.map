{"version":3,"sources":["D:/tools/es-vue/test/src/karma/Manger.es"],"names":["getKeySymbols","_app","_dataset","pages","asserts","tasks","creator","instance","getInstance","obj","Manger","dataset","Map","register","name","value","set","get","getApp","setApp","app","pushPage","page","push","popPage","shift","addAssert","getAsserts","addTask","task","getTask"],"mappings":";wBAIAA;;;;aAYYC;aAEAC;aA8BAC,OAAmB;aASnBC,SAAgB;aAShBC,MAAgC;;;;OA9D5CC;;;;;;SAEmBC;;;;SAERC;;4BAAAA;iBACH,IAAI,AAAAC,MAAM,AAAAC,OAAOH;oBACb,CAACE;qBACD,AAAAC,OAAOH,QAAP,CAAiBE,GAAA,CAAM,IAAIC;kBAE/B;wBAAOD;;;;;SAGHR;;;;SAEAC;;;;SAEJS;;;0BAAAA;iBACA,MAAM,AAAAA,UAAU,eAAKT;oBAClBS;qBACC,OAAOA;kBAEX;wBAAO,eAAKT,QAAL,CAAgB,IAAIU;;;SAG/BC;;4BAAAA,SAASC,KAAaC;iBAClB,KAAKJ,QAAQK,IAAIF,KAAMC;;;SAG3BE;;4BAAAA,IAAWH;iBACP,MAAM,AAAAC,QAAQ,KAAKJ,QAAQM,IAAIH;oBAC5B,AAAAC;qBACC,OAAO,AAAAA;kBAEX;wBAAO,KAAKJ,QAAQM,IAAIH;;;SAG5BI;;4BAAAA;iBACI,OAAO,eAAKjB;;;SAGhBkB;;4BAAAA,OAAOC;iBACH,eAAKnB,IAAL,CAAUmB;;;SAGNjB;;;;SACRkB;;4BAAAA,SAAUC;iBACN,eAAKnB,MAAMoB,KAAMD;;;SAGrBE;;4BAAAA;iBACI,OAAO,eAAKrB,MAAMsB;;;SAGdrB;;;;SACRsB;;4BAAAA,UAAWJ;iBACP,eAAKlB,QAAQmB,KAAMD;;;SAGvBK;;4BAAAA;iBACI,OAAO,eAAKvB;;;SAGRC;;;;SACRuB;;4BAAAA,QAASd,KAAae;iBAClB,eAAKxB,MAAMS,KAAX,CAAiBe;;;SAGrBC;;4BAAAA,QAAQhB;iBACJ,OAAO,eAAKT,MAAMS","sourcesContent":["package karma;\r\nimport web.components.Component;\r\nimport karma.asserts.Base;\r\n\r\nclass Manger {\r\n\r\n    static private instance:Manger;\r\n\r\n    static getInstance(){\r\n        let obj = Manger.instance;\r\n        if( !obj ){\r\n            Manger.instance= obj = new Manger();\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    private _app;\r\n\r\n    private _dataset:Map<any,any>;\r\n\r\n    get dataset(){\r\n        const dataset = this._dataset\r\n        if(dataset){\r\n            return dataset;\r\n        }\r\n        return this._dataset = new Map<any,any>();\r\n    }\r\n\r\n    register(name:string, value:any){\r\n        this.dataset.set(name, value);\r\n    }\r\n\r\n    get<T=any>(name:string):T{\r\n        const value = this.dataset.get(name);\r\n        if(value instanceof Function){\r\n            return value() as T;\r\n        }\r\n        return this.dataset.get(name) as T;\r\n    }\r\n\r\n    getApp(){\r\n        return this._app;\r\n    }\r\n\r\n    setApp(app){\r\n        this._app=app;\r\n    }\r\n\r\n    private pages:Component[]= [];\r\n    pushPage( page:Component ){\r\n        this.pages.push( page );\r\n    }\r\n\r\n    popPage(){\r\n        return this.pages.shift();\r\n    }\r\n\r\n    private asserts:Base[]= [];\r\n    addAssert( page:Base ){\r\n        this.asserts.push( page );\r\n    }\r\n\r\n    getAsserts(){\r\n        return this.asserts;\r\n    }\r\n\r\n    private tasks:{[key:string]:Function} = {};\r\n    addTask( name:string, task:Function ){\r\n        this.tasks[name]=task;\r\n    }\r\n\r\n    getTask(name){\r\n        return this.tasks[name];\r\n    }\r\n\r\n}"]}